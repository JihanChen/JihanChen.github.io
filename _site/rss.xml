<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title></title>
		<description>JihanChen Tech Space, share technology post</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>springboot使用@Valid进行请求参数校验</title>
				<description>&lt;p&gt;最近在研究springboot,发现实在是太方便了，各种注解，各种爽。这篇文章主要是在controller层使用@Valid注解进行参数校验，校验不通过返回自定义的结果。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;起源&lt;/h2&gt;
&lt;p&gt;使用框架最大的好处就是加快了开发速度，很多场景我们需要对客户端请求的参数进行一些常规校验，比如非空校验，位数校验，格式是否正确等等。以前我们可能在控制层获取到请求参数，然后一个个对参数进行校验，不通过校验就无法进行下面的业务。使用springboot的时候用@Valid对参数进行校验,大大加快的开发速度，精简了代码。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;开始使用&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;代码操作&lt;/h3&gt;

&lt;p&gt;controller层代码
&lt;code class=&quot;highlighter-rouge&quot;&gt;
@RequestMapping(&quot;/validation/msg&quot;)
@ResponseBody
public String validationMsg(@Valid @RequestBody User user){
        return &quot;ok&quot;;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;User实体对象
```
public class User{
    @NotEmpty(message = “用户名不能为空”)
    private String uname;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@NotEmpty(message = &quot;密码不能为空&quot;)
private String pwd; 

private int age; 
// 此处省略掉set get方法 }```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面客户端开始请求
POST /validation/msg
&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;123456&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;28&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;请求之后返回的结果：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1468634431233&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bad Request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;exception&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;org.springframework.web.bind.MethodArgumentNotValidException&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;errors&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;codes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotEmpty.user.uname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotEmpty.uname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotEmpty.java.lang.String&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotEmpty&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;arguments&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;codes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user.uname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;uname&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;arguments&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;defaultMessage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;uname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;uname&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;defaultMessage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;用户名不能为空&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;objectName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;uname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rejectedValue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;bindingFailure&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotEmpty&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Validation failed for object=&#39;user&#39;. Error count: 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/validation/msg&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;springboot 对异常进行了封装，针对json请求和普通的页面请求做了处理，具体可以查看&lt;a href=&quot;http://www.cnblogs.com/xinzhao/p/4934247.html&quot;&gt;http://www.cnblogs.com/xinzhao/p/4934247.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;显然返回的参数太多了很乱，看的不直观，一般框架对于请求也都会有一个固定的返回格式，比如&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;errorCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ok&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;   请求正常&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;errorCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1001&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;errorMsg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;用户名不能为空&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; 请求异常&lt;/p&gt;

&lt;p&gt;当你看了上面链接的异常处理其实就很简单的可以显示自定义的返回结果。在controller层添加如下代码&lt;/p&gt;

&lt;p&gt;```   &lt;br /&gt;
@ExceptionHandler(value=MethodArgumentNotValidException.class) 
@ResponseBody
public ValidationResponse resolveMValidException(MethodArgumentNotValidException e){&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     // 只获取第一个异常的错误返回
    ObjectError objectError = e.getBindingResult().getAllErrors().get(0);
    // 获取错误描述－上面注解的信息
    String validationMsg = objectError.getDefaultMessage();

    return new ValidationResponse(&quot;1001&quot;,validationMsg);  } ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;定义了异常处理 然后输出了自定义的返回结果，最终输出了&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;errorCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1001&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;errorMsg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;用户名不能为空&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;是不是很赞啊，非常简单友好的输出了错误异常信息。&lt;/p&gt;

&lt;p&gt;下面我们使用正确的请求发给服务端
```
POST /validation/msg&lt;/p&gt;

&lt;p&gt;{
    “uname”:”皮卡丘”,
    “pwd”: “123456”,
    “age”: “1”
}&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;结果没有出错了哦，返回结果
&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;errorCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ok&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;jsr303&quot;&gt;JSR303定义的校验类型&lt;/h3&gt;

&lt;p&gt;由于 @Valid 校验是基于JSR303,使用方式可以查看文章 &lt;a href=&quot;http://www.ibm.com/developerworks/cn/java/j-lo-jsr303/&quot;&gt;http://www.ibm.com/developerworks/cn/java/j-lo-jsr303/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;校验类型&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;空检查
@Null       验证对象是否为null
@NotNull    验证对象是否不为null, 无法查检长度为0的字符串
@NotBlank 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.
@NotEmpty 检查约束元素是否为NULL或者是EMPTY.&lt;/p&gt;

&lt;p&gt;Booelan检查
@AssertTrue     验证 Boolean 对象是否为 true&lt;br /&gt;
@AssertFalse    验证 Boolean 对象是否为 false&lt;/p&gt;

&lt;p&gt;长度检查
@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内&lt;br /&gt;
@Length(min=, max=) Validates that the annotated string is between min and max included.&lt;/p&gt;

&lt;p&gt;日期检查
@Past        验证 Date 和 Calendar 对象是否在当前时间之前&lt;br /&gt;
@Future     验证 Date 和 Calendar 对象是否在当前时间之后&lt;br /&gt;
@Pattern    验证 String 对象是否符合正则表达式的规则&lt;/p&gt;

&lt;p&gt;数值检查&lt;/p&gt;

&lt;p&gt;@Min            验证 Number 和 String 对象是否大等于指定的值&lt;br /&gt;
@Max            验证 Number 和 String 对象是否小等于指定的值&lt;br /&gt;
@DecimalMax 被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度
@DecimalMin 被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度
@Digits     验证 Number 和 String 的构成是否合法&lt;br /&gt;
@Digits(integer=,fraction=) 验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。
@Range(min=, max=) Checks whether the annotated value lies between (inclusive) the specified minimum and maximum.
@Range(min=10000,max=50000,message=”range.bean.wage”)
private BigDecimal wage;&lt;/p&gt;

&lt;p&gt;@Valid 递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)
@CreditCardNumber信用卡验证
@Email  验证是否是邮件地址，如果为null,不进行验证，算通过验证。
@URL(protocol=,host=, port=,regexp=, flags=)&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;结尾&lt;/h2&gt;
&lt;p&gt;在springmvc使用@Valid会一点，需要引入validation-api和hibernate-validator依赖，这个下次再讲。springboot简单几行代码就完成了整个校验过程，全程都不需要配置文件，全是基于注解，“约定优于配置” 的理念确实强大，快速开发的不二选择。&lt;/p&gt;
</description>
				<pubDate>Fri, 17 Jun 2016 00:00:00 +0800</pubDate>
				<link>/java/2016/06/17/springboot-validation.html</link>
				<guid isPermaLink="true">/java/2016/06/17/springboot-validation.html</guid>
			</item>
		
			<item>
				<title>idea 的一些开发设置</title>
				<description>&lt;p&gt;工欲善其事，必先利其器。自打学习程序开始，从最先的文本编程，到myeclipse，后面是eclipse，到现在的idea，一个个工具的转变使用，加速了编程的速度，编码的速度，好像从原始社会到现代社会的一个转变。&lt;/p&gt;

&lt;h2 id=&quot;idea&quot;&gt;idea的常用设置&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;全局设置&lt;/h3&gt;
&lt;p&gt;首先对idea进行全局模式设置，方便配置，如下点击进行配置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xti81.com2.z0.glb.clouddn.com/idea-0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个主界面一般是首次才出现，后面开发工程时候关闭打开的时候直接打开上一次编辑过的工程项目，不过没关系，我们有方法可以是每次打开都是这个界面选择具体的工程。
打开配置(下面是mac版本的idea操作，不过windows配置也是一样的)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xti81.com2.z0.glb.clouddn.com/idea-1-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将勾去掉，下次打开就是前面的那个主界面了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xti81.com2.z0.glb.clouddn.com/idea-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;主题设置&lt;/h3&gt;
&lt;p&gt;设置酷炫的黑色主题，idea安装之后默认是白色主题的，下面进行设置修改主题&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xti81.com2.z0.glb.clouddn.com/idea-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打开之后选择框里的那种效果，点击生效后马上可以看到主题换了。（后面还会讲绿色主题的设置）&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;字体设置&lt;/h3&gt;
&lt;p&gt;首先需要保存一个另外的字体样式，不然后面将不能修改字体大小和样式颜色&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xti81.com2.z0.glb.clouddn.com/idea-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择自己喜欢的字体还有大小&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xti81.com2.z0.glb.clouddn.com/idea-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;编码设置&lt;/h3&gt;
&lt;p&gt;（一般项目开发都是设置utf-8）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xti81.com2.z0.glb.clouddn.com/idea-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;行号设置&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://7xti81.com2.z0.glb.clouddn.com/idea-7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;绿色养颜背景设置&lt;/h2&gt;
&lt;p&gt;从百度知道我们眼睛比较耐看的RGB数值分别是（199,237,204）
从原来的白色主题重新 save as 一个新的自定义颜色设置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xti81.com2.z0.glb.clouddn.com/idea-13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xti81.com2.z0.glb.clouddn.com/idea-14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后进入开始设置主面板的颜色背景&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xti81.com2.z0.glb.clouddn.com/idea-15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xti81.com2.z0.glb.clouddn.com/idea-16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你也可以进行自己喜欢的颜色进行RGB选择。&lt;/p&gt;

&lt;p&gt;最后设置字体风格和大小&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xti81.com2.z0.glb.clouddn.com/idea-17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
				<pubDate>Wed, 27 Apr 2016 00:00:00 +0800</pubDate>
				<link>/%E5%B7%A5%E5%85%B7/2016/04/27/tool-idea.html</link>
				<guid isPermaLink="true">/%E5%B7%A5%E5%85%B7/2016/04/27/tool-idea.html</guid>
			</item>
		
			<item>
				<title>记忆的开始</title>
				<description>&lt;p&gt;年纪慢慢变大了，学习的知识体系也越来越庞大，很多东西做了，过了一段时间就忘记了，发现好像之前做过啊，但是却怎么也想不起来了，都是一段段的零碎记忆，没办法的办法又去网上找啊找，时间就这样悄悄的流失了，每次想到这，总会有一些失落。挣扎了许久才决定写博客，记录自己的技术学习过程，生活经验。希望有一天回头来看的时候，也是有一些美好的足迹，以至于自己不会迷失在回途的路上。&lt;/p&gt;

</description>
				<pubDate>Tue, 26 Apr 2016 00:00:00 +0800</pubDate>
				<link>/%E7%94%9F%E6%B4%BB/2016/04/26/hello.html</link>
				<guid isPermaLink="true">/%E7%94%9F%E6%B4%BB/2016/04/26/hello.html</guid>
			</item>
		
	</channel>
</rss>
